{"uid":"110f476d80a1b2b8","name":"create new book with text fields contain polish chars","fullName":"pl.damianlegutko.demo.api.test.crud.domain.books.BookPostTest.create_new_book_with_text_fields_contain_polish_chars","historyId":"655bb353434351addfcc649d16725cb5","time":{"start":1709470842334,"stop":1709470842956,"duration":622},"description":"","status":"failed","statusMessage":"\r\nExpecting actual:\r\n  {\r\n  \"id\" : 3278,\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"################\",\r\n  \"publication\" : \"################\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nto be equal to:\r\n  {\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nwhen recursively comparing field by field, but found the following 2 differences:\r\n\r\nfield/property 'author' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nfield/property 'publication' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n","statusTrace":"java.lang.AssertionError: \r\nExpecting actual:\r\n  {\r\n  \"id\" : 3278,\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"################\",\r\n  \"publication\" : \"################\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nto be equal to:\r\n  {\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nwhen recursively comparing field by field, but found the following 2 differences:\r\n\r\nfield/property 'author' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nfield/property 'publication' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n\r\n\tat pl.damianlegutko.demo.api.test.crud.framework.assertion.BaseAssert.isRecursiveEqualTo(BaseAssert.java:40)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookSteps.assertBookEqualsExpected(BookSteps.java:281)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookScenarios.createNewBookTestScenario(BookScenarios.java:28)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookPostTest.create_new_book_with_text_fields_contain_polish_chars(BookPostTest.java:45)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\r\n\tat org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\r\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"\r\nExpecting actual:\r\n  {\r\n  \"id\" : 3278,\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"################\",\r\n  \"publication\" : \"################\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nto be equal to:\r\n  {\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nwhen recursively comparing field by field, but found the following 2 differences:\r\n\r\nfield/property 'author' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nfield/property 'publication' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n","statusTrace":"java.lang.AssertionError: \r\nExpecting actual:\r\n  {\r\n  \"id\" : 3278,\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"################\",\r\n  \"publication\" : \"################\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nto be equal to:\r\n  {\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nwhen recursively comparing field by field, but found the following 2 differences:\r\n\r\nfield/property 'author' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nfield/property 'publication' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n\r\n\tat pl.damianlegutko.demo.api.test.crud.framework.assertion.BaseAssert.isRecursiveEqualTo(BaseAssert.java:40)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookSteps.assertBookEqualsExpected(BookSteps.java:281)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookScenarios.createNewBookTestScenario(BookScenarios.java:28)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookPostTest.create_new_book_with_text_fields_contain_polish_chars(BookPostTest.java:45)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\r\n\tat org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\r\n","steps":[{"name":"Generate random Book payload","time":{"start":1709470842338,"stop":1709470842349,"duration":11},"status":"passed","steps":[],"attachments":[{"uid":"e22fe61210d3bd03","name":"STEP INFO 1: Generated random Book","source":"e22fe61210d3bd03.txt","type":"text/plain","size":173}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":false},{"name":"POST new Book successfully","time":{"start":1709470842349,"stop":1709470842951,"duration":602},"status":"passed","steps":[],"attachments":[{"uid":"1983b4ac50728577","name":"REQUEST 38: --> POST http://77.102.250.113:17354/api/v1/books","source":"1983b4ac50728577.txt","type":"text/plain","size":1485},{"uid":"17d752f575618cf3","name":"STEP INFO 1: POSTed Book with id 3278","source":"17d752f575618cf3.txt","type":"text/plain","size":209}],"parameters":[{"name":"bookToCreate","value":"{\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}"}],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"Assert Book Error Body equals expected","time":{"start":1709470842951,"stop":1709470842955,"duration":4},"status":"failed","statusMessage":"\r\nExpecting actual:\r\n  {\r\n  \"id\" : 3278,\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"################\",\r\n  \"publication\" : \"################\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nto be equal to:\r\n  {\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nwhen recursively comparing field by field, but found the following 2 differences:\r\n\r\nfield/property 'author' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nfield/property 'publication' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n","statusTrace":"java.lang.AssertionError: \r\nExpecting actual:\r\n  {\r\n  \"id\" : 3278,\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"################\",\r\n  \"publication\" : \"################\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nto be equal to:\r\n  {\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}\r\nwhen recursively comparing field by field, but found the following 2 differences:\r\n\r\nfield/property 'author' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nfield/property 'publication' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n\r\n\tat pl.damianlegutko.demo.api.test.crud.framework.assertion.BaseAssert.isRecursiveEqualTo(BaseAssert.java:40)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookSteps.assertBookEqualsExpected(BookSteps.java:281)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookScenarios.createNewBookTestScenario(BookScenarios.java:28)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookPostTest.create_new_book_with_text_fields_contain_polish_chars(BookPostTest.java:45)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\r\n\tat org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\r\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"{\r\n  \"id\" : 3278,\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"################\",\r\n  \"publication\" : \"################\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}"},{"name":"expected","value":"{\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Short story\",\r\n  \"pages\" : 106,\r\n  \"price\" : 64.84\r\n}"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":false},"afterStages":[],"labels":[{"name":"tag","value":"NonDestructive"},{"name":"tag","value":"Api"},{"name":"tag","value":"EndpointValidation"},{"name":"tag","value":"Books"},{"name":"tag","value":"Post"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:pl.damianlegutko.demo.api.test.crud.domain.books.BookPostTest]/[method:create_new_book_with_text_fields_contain_polish_chars()]"},{"name":"owner","value":"Damian Legutko"},{"name":"feature","value":"POST endpoint"},{"name":"epic","value":"Book service"},{"name":"story","value":"Create Book payload validation"},{"name":"host","value":"DESKTOP-LEHP5T6"},{"name":"thread","value":"15872@DESKTOP-LEHP5T6.main(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"pl.damianlegutko.demo.api.test.crud.domain.books.BookPostTest"},{"name":"testClass","value":"pl.damianlegutko.demo.api.test.crud.domain.books.BookPostTest"},{"name":"testMethod","value":"create_new_book_with_text_fields_contain_polish_chars"},{"name":"suite","value":"pl.damianlegutko.demo.api.test.crud.domain.books.BookPostTest"},{"name":"severity","value":"minor"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Author website","url":"http://damianlegutko.pl/","type":"custom"},{"name":"Framework repository","url":"https://github.com/DamianLegutko","type":"custom"},{"name":"TESTCASE-11","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"minor","owner":"Damian Legutko","retries":[{"uid":"d7280ece05fea3b2","status":"failed","statusDetails":"\r\nExpecting actual:\r\n  {\r\n  \"id\" : 3234,\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"################\",\r\n  \"publication\" : \"################\",\r\n  \"category\" : \"Science fiction\",\r\n  \"pages\" : 707,\r\n  \"price\" : 311.90\r\n}\r\nto be equal to:\r\n  {\r\n  \"name\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"author\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"publication\" : \"ąęłńóśźżĄĘŁŃÓŚŹŻ\",\r\n  \"category\" : \"Science fiction\",\r\n  \"pages\" : 707,\r\n  \"price\" : 311.90\r\n}\r\nwhen recursively comparing field by field, but found the following 2 differences:\r\n\r\nfield/property 'author' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nfield/property 'publication' differ:\r\n- actual value  : \"################\"\r\n- expected value: \"ąęłńóśźżĄĘŁŃÓŚŹŻ\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n","time":{"start":1709470661950,"stop":1709470662581,"duration":631}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["EndpointValidation","Post","NonDestructive","Api","Books"]},"source":"110f476d80a1b2b8.json","parameterValues":[]}
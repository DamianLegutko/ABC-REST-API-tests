{"uid":"c1c064173350f0bf","name":"update book with all new changeable values","fullName":"pl.damianlegutko.demo.api.test.crud.domain.books.BookPutTest.update_book_with_all_new_changeable_values","historyId":"241cb7e513df1c1e18242b2e996708e5","time":{"start":1709470700894,"stop":1709470702175,"duration":1281},"description":"","status":"failed","statusMessage":"\r\nExpecting actual:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 0.45\r\n}\r\nto be equal to:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'pages' differ:\r\n- actual value  : 870\r\n- expected value: 1929\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n","statusTrace":"java.lang.AssertionError: \r\nExpecting actual:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 0.45\r\n}\r\nto be equal to:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'pages' differ:\r\n- actual value  : 870\r\n- expected value: 1929\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n\r\n\tat pl.damianlegutko.demo.api.test.crud.framework.assertion.BaseAssert.isRecursiveEqualTo(BaseAssert.java:40)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookSteps.assertBookEqualsExpected(BookSteps.java:281)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookScenarios.updateBookScenario(BookScenarios.java:90)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookPutTest.update_book_with_all_new_changeable_values(BookPutTest.java:114)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\r\n\tat org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\r\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"\r\nExpecting actual:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 0.45\r\n}\r\nto be equal to:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'pages' differ:\r\n- actual value  : 870\r\n- expected value: 1929\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n","statusTrace":"java.lang.AssertionError: \r\nExpecting actual:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 0.45\r\n}\r\nto be equal to:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'pages' differ:\r\n- actual value  : 870\r\n- expected value: 1929\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n\r\n\tat pl.damianlegutko.demo.api.test.crud.framework.assertion.BaseAssert.isRecursiveEqualTo(BaseAssert.java:40)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookSteps.assertBookEqualsExpected(BookSteps.java:281)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookScenarios.updateBookScenario(BookScenarios.java:90)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookPutTest.update_book_with_all_new_changeable_values(BookPutTest.java:114)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\r\n\tat org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\r\n","steps":[{"name":"Ensure new random Book","time":{"start":1709470700896,"stop":1709470701528,"duration":632},"status":"passed","steps":[{"name":"POST new Book successfully","time":{"start":1709470700906,"stop":1709470701525,"duration":619},"status":"passed","steps":[],"attachments":[{"uid":"ef56ff83962d5f59","name":"REQUEST 100: --> POST http://77.102.250.113:17354/api/v1/books","source":"ef56ff83962d5f59.txt","type":"text/plain","size":1410},{"uid":"dcd39f57fa8daa6e","name":"STEP INFO 1: POSTed Book with id 3259","source":"dcd39f57fa8daa6e.txt","type":"text/plain","size":190}],"parameters":[{"name":"bookToCreate","value":"{\r\n  \"name\" : \"A Summer Bird-Cage\",\r\n  \"author\" : \"Sirena Hansen\",\r\n  \"publication\" : \"Marshall Pickering\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 137.63\r\n}"}],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"Assert Book Error Body equals expected","time":{"start":1709470701525,"stop":1709470701527,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"e2d274aa07976cb6","name":"STEP INFO 1: Asserted Book","source":"e2d274aa07976cb6.txt","type":"text/plain","size":190}],"parameters":[{"name":"actual","value":"{\r\n  \"id\" : 3259,\r\n  \"name\" : \"A Summer Bird-Cage\",\r\n  \"author\" : \"Sirena Hansen\",\r\n  \"publication\" : \"Marshall Pickering\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 137.63\r\n}"},{"name":"expected","value":"{\r\n  \"name\" : \"A Summer Bird-Cage\",\r\n  \"author\" : \"Sirena Hansen\",\r\n  \"publication\" : \"Marshall Pickering\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 137.63\r\n}"}],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":false}],"attachments":[{"uid":"f2edd2f327161c5a","name":"STEP INFO 1: Generated random Book","source":"f2edd2f327161c5a.txt","type":"text/plain","size":174},{"uid":"6b2a9b4ffe7a34ce","name":"STEP INFO 1: The existence of a book with ID 3259 was ensured","source":"6b2a9b4ffe7a34ce.txt","type":"text/plain","size":190}],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"UPDATE Book successfully","time":{"start":1709470701536,"stop":1709470702174,"duration":638},"status":"passed","steps":[{"name":"UPDATE Book successfully","time":{"start":1709470701536,"stop":1709470702174,"duration":638},"status":"passed","steps":[],"attachments":[{"uid":"5e9fc7f24ef4353","name":"REQUEST 101: --> PUT http://77.102.250.113:17354/api/v1/books/3259","source":"5e9fc7f24ef4353.txt","type":"text/plain","size":1350},{"uid":"37de095cbc47b6d9","name":"STEP INFO 1: PUTed Book with id 3259","source":"37de095cbc47b6d9.txt","type":"text/plain","size":187}],"parameters":[{"name":"book","value":"{\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}"},{"name":"bookIdToUpdate","value":"3259"}],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[{"name":"book","value":"{\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}"}],"stepsCount":1,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"Assert Book Error Body equals expected","time":{"start":1709470702174,"stop":1709470702174,"duration":0},"status":"failed","statusMessage":"\r\nExpecting actual:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 0.45\r\n}\r\nto be equal to:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'pages' differ:\r\n- actual value  : 870\r\n- expected value: 1929\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n","statusTrace":"java.lang.AssertionError: \r\nExpecting actual:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 0.45\r\n}\r\nto be equal to:\r\n  {\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'pages' differ:\r\n- actual value  : 870\r\n- expected value: 1929\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: id\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n\r\n\tat pl.damianlegutko.demo.api.test.crud.framework.assertion.BaseAssert.isRecursiveEqualTo(BaseAssert.java:40)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookSteps.assertBookEqualsExpected(BookSteps.java:281)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookScenarios.updateBookScenario(BookScenarios.java:90)\r\n\tat pl.damianlegutko.demo.api.test.crud.domain.books.BookPutTest.update_book_with_all_new_changeable_values(BookPutTest.java:114)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\r\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\r\n\tat org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\r\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"{\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 870,\r\n  \"price\" : 0.45\r\n}"},{"name":"expected","value":"{\r\n  \"id\" : 3259,\r\n  \"name\" : \"Unweaving the Rainbow\",\r\n  \"author\" : \"Terisa McKenzie\",\r\n  \"publication\" : \"Orion Books\",\r\n  \"category\" : \"Horror\",\r\n  \"pages\" : 1929,\r\n  \"price\" : 0.45\r\n}"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":6,"hasContent":true,"attachmentsCount":7,"shouldDisplayMessage":false},"afterStages":[],"labels":[{"name":"tag","value":"Api"},{"name":"tag","value":"EndpointValidation"},{"name":"tag","value":"Books"},{"name":"tag","value":"Put"},{"name":"tag","value":"Destructive"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:pl.damianlegutko.demo.api.test.crud.domain.books.BookPutTest]/[method:update_book_with_all_new_changeable_values()]"},{"name":"owner","value":"Damian Legutko"},{"name":"epic","value":"Book service"},{"name":"feature","value":"PUT endpoint"},{"name":"story","value":"Update Book"},{"name":"host","value":"DESKTOP-LEHP5T6"},{"name":"thread","value":"15512@DESKTOP-LEHP5T6.main(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"pl.damianlegutko.demo.api.test.crud.domain.books.BookPutTest"},{"name":"testClass","value":"pl.damianlegutko.demo.api.test.crud.domain.books.BookPutTest"},{"name":"testMethod","value":"update_book_with_all_new_changeable_values"},{"name":"suite","value":"pl.damianlegutko.demo.api.test.crud.domain.books.BookPutTest"},{"name":"severity","value":"blocker"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Author website","url":"http://damianlegutko.pl/","type":"custom"},{"name":"Framework repository","url":"https://github.com/DamianLegutko","type":"custom"},{"name":"TESTCASE-35","type":"tms"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["EndpointValidation","Destructive","Api","Books","Put"]},"source":"c1c064173350f0bf.json","parameterValues":[]}